repositories {
    mavenLocal()
    mavenCentral()
}

apply(plugin: 'java')
apply(plugin: 'maven')
apply(plugin: 'signing')
apply(plugin: 'jacoco')

setSourceCompatibility(1.6)
setTargetCompatibility(1.6)
compileJava.options.encoding = 'UTF-8'

dependencies {
    compile 'org.projectlombok:lombok:1.16.16'
    compile 'org.slf4j:slf4j-api:1.7.25'

    testRuntime 'org.slf4j:slf4j-log4j12:1.7.5'
    testCompile 'junit:junit:4.12'
}

if(project.hasProperty('signing.keyId'))
    signing {
        sign configurations.archives
    }

task([type: Copy], 'backup') {
    delete "/home/fedorchuck/Dropbox/backup/developers-notification"
    from projectDir.canonicalPath
    into "/home/fedorchuck/Dropbox/backup/developers-notification/"
}

task([type: Copy], 'copyDocs') {
    delete "$projectDir/docs/javadoc-${version}"
    from buildDir.canonicalPath + "/docs/javadoc"
    into projectDir.canonicalPath + "/docs/javadoc-${version}"
}

task([type: Jar], 'sourcesJar') {
    classifier = 'sources'
    from project.sourceSets.main.allSource
}

task([type: Jar], 'javadocJar') {
    javadoc.execute()
    copyDocs.execute()
    classifier = 'javadoc'
    from project.buildDir.canonicalPath + "/docs/javadoc"
}

artifacts {
    archives javadocJar, sourcesJar
}

def generatePom(Object pom) {
    pom.withXml {
        Node root = asNode()
        root.get('groupId').each {
            root.remove(it as Node)
        }
        root.appendNode('groupId', "${groupId}")
        root.get('artifactId').each {
            root.remove(it as Node)
        }
        root.appendNode('artifactId', "${artifactId}")
        root.get('version').each {
            root.remove(it as Node)
        }
        root.appendNode('version', "${version}")
        root.get('packaging').each {
            root.remove(it as Node)
        }
        root.appendNode('packaging', 'jar')
        root.appendNode('name', "${stringName}")
        root.appendNode('inceptionYear', "${inceptionYear}")
        root.appendNode('description', 'Java library which provides developers notification via messengers.')
        root.appendNode('url', 'https://github.com/fedorchuck/developers-notification')
        def nodeScm = root.appendNode('scm')
        nodeScm.appendNode('url', 'https://github.com/fedorchuck/developers-notification')
        nodeScm.appendNode('connection', 'scm:git:https://github.com/fedorchuck/developers-notification')
        nodeScm.appendNode('developerConnection', 'scm:git:https://github.com/fedorchuck/developers-notification')
        def nodeLicenses = root.appendNode('licenses')
        def NodeLicense = nodeLicenses.appendNode('license')
        NodeLicense.appendNode('name', 'The Apache License, Version 2.0')
        NodeLicense.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
        def nodeDevelopers = root.appendNode('developers')
        def nodeDeveloper = nodeDevelopers.appendNode('developer')
        nodeDeveloper.appendNode('id', 'fedorchuck')
        nodeDeveloper.appendNode('name', 'Volodymyr Fedorchuk')
        nodeDeveloper.appendNode('email', 'vl.fedorchuck@gmail.com')
        root.get('dependencies').each {
            root.remove(it as Node)
        }
        def dependenciesNode = root.appendNode('dependencies')
        project.configurations.compile?.resolvedConfiguration?.resolvedArtifacts?.each {
            def dependencyNode = dependenciesNode.appendNode('dependency')
            dependencyNode.appendNode('groupId', it.moduleVersion.id.group)
            dependencyNode.appendNode('artifactId', it.moduleVersion.id.name)
            dependencyNode.appendNode('version', it.moduleVersion.id.version)
        }
    }
}

if(project.hasProperty('signing.keyId'))
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                def repoUrl
                if (project.version.endsWith("SNAPSHOT")) {
                    repoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                } else {
                    repoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                }
                repository(url: repoUrl) {
                    authentication(
                            userName: project.getProperty('sonatype.username'),
                            password: project.getProperty('sonatype.password'))
                }

                generatePom(pom)
            }
        }
    }

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled false
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.task(test)
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14'
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}